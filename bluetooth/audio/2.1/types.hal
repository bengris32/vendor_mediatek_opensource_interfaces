/*
 * Copyright 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.mediatek.hardware.bluetooth.audio@2.1;

struct TimeSpec {
    uint64_t tvSec;   // seconds
    uint64_t tvNSec;  // nanoseconds
};

enum Status : uint8_t {
    SUCCESS = 0x00,
    UNSUPPORTED_CODEC_CONFIGURATION,
    FAILURE,
};

enum SessionType : uint8_t {
    UNKNOWN,
    A2DP_SOFTWARE_ENCODING_DATAPATH,
    A2DP_HARDWARE_OFFLOAD_DATAPATH,
    HEARING_AID_SOFTWARE_ENCODING_DATAPATH,
};

enum CodecType : uint32_t {
    UNKNOWN = 0x00,
    SBC = 0x01,
    AAC = 0x02,
    APTX = 0x04,
    APTX_HD = 0x08,
    LDAC = 0x10,
};

enum SampleRate : uint32_t {
    RATE_UNKNOWN = 0x00,
    RATE_44100 = 0x01,
    RATE_48000 = 0x02,
    RATE_88200 = 0x04,
    RATE_96000 = 0x08,
    RATE_176400 = 0x10,
    RATE_192000 = 0x20,
    RATE_16000 = 0x40,
    RATE_24000 = 0x80,
};

enum BitsPerSample : uint8_t {
    BITS_UNKNOWN = 0x00,
    BITS_16 = 0x01,
    BITS_24 = 0x02,
    BITS_32 = 0x04,
};

enum ChannelMode : uint8_t {
    UNKNOWN = 0x00,
    MONO = 0x01,
    STEREO = 0x02,
};

enum SbcChannelMode : uint8_t {
    UNKNOWN = 0x00,
    JOINT_STEREO = 0x01,
    STEREO = 0x02,
    DUAL = 0x04,
    MONO = 0x08,
};

enum SbcBlockLength : uint8_t {
    BLOCKS_4 = 0x80,
    BLOCKS_8 = 0x40,
    BLOCKS_12 = 0x20,
    BLOCKS_16 = 0x10,
};

enum SbcNumSubbands : uint8_t {
    SUBBAND_4 = 0x08,
    SUBBAND_8 = 0x04,
};

enum SbcAllocMethod : uint8_t {
    ALLOC_MD_S = 0x02,
    ALLOC_MD_L = 0x01,
};

enum AacObjectType : uint8_t {
    MPEG2_LC = 0x80,
    MPEG4_LC = 0x40,
    MPEG4_LTP = 0x20,
    MPEG4_SCALABLE = 0x10,
};

enum AacVariableBitRate : uint8_t {
    ENABLED = 0x80,
    DISABLED = 0x00,
};

enum LdacChannelMode : uint8_t {
    UNKNOWN = 0x00,
    STEREO = 0x01,
    DUAL = 0x02,
    MONO = 0x04,
};

enum LdacQualityIndex : uint8_t {
    // 990kbps
    QUALITY_HIGH = 0x00,
    // 660kbps
    QUALITY_MID = 0x01,
    // 330kbps
    QUALITY_LOW = 0x02,
    // Adaptive Bit Rate mode
    QUALITY_ABR = 0x7F,
};

struct PcmParameters {
    SampleRate sampleRate;
    ChannelMode channelMode;
    BitsPerSample bitsPerSample;
};

struct SbcParameters {
    SampleRate sampleRate;
    SbcChannelMode channelMode;
    SbcBlockLength blockLength;
    SbcNumSubbands numSubbands;
    SbcAllocMethod allocMethod;
    BitsPerSample bitsPerSample;
    uint8_t minBitpool;
    uint8_t maxBitpool;
};

struct AacParameters {
    AacObjectType objectType;
    SampleRate sampleRate;
    ChannelMode channelMode;
    AacVariableBitRate variableBitRateEnabled;
    BitsPerSample bitsPerSample;
};

struct LdacParameters {
    SampleRate sampleRate;
    LdacChannelMode channelMode;
    LdacQualityIndex qualityIndex;
    BitsPerSample bitsPerSample;
};

struct AptxParameters {
    SampleRate sampleRate;
    ChannelMode channelMode;
    BitsPerSample bitsPerSample;
};

struct CodecCapabilities {
    CodecType codecType;

    safe_union Capabilities {
      SbcParameters sbcCapabilities;
      AacParameters aacCapabilities;
      LdacParameters ldacCapabilities;
      AptxParameters aptxCapabilities;
    } capabilities;
};

safe_union AudioCapabilities {
    PcmParameters pcmCapabilities;
    CodecCapabilities codecCapabilities;
};

struct CodecConfiguration {
    CodecType codecType;
    uint32_t encodedAudioBitrate;
    uint16_t peerMtu;
    bool isScmstEnabled;
    safe_union CodecSpecific {
        SbcParameters sbcConfig;
        AacParameters aacConfig;
        LdacParameters ldacConfig;
        AptxParameters aptxConfig;
    } config;
};

safe_union AudioConfiguration {
    PcmParameters pcmConfig;
    CodecConfiguration codecConfig;
};
